// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using backendInventory.Infrastructure.Context;

#nullable disable

namespace backendInventory.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20250523160215_Vinculation Floor to Department")]
    partial class VinculationFloortoDepartment
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("backendInventory.Domain.Models.Building", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("UnitId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UnitId");

                    b.ToTable("Buildings", (string)null);
                });

            modelBuilder.Entity("backendInventory.Domain.Models.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BuildingId")
                        .HasColumnType("integer");

                    b.Property<string>("Floor")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("BuildingId");

                    b.ToTable("Departments", (string)null);
                });

            modelBuilder.Entity("backendInventory.Domain.Models.Manufacturer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Manufacturers", (string)null);
                });

            modelBuilder.Entity("backendInventory.Domain.Models.Model", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ManufacturerId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("ManufacturerId");

                    b.ToTable("Models", (string)null);
                });

            modelBuilder.Entity("backendInventory.Domain.Models.Printer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BuildingId")
                        .HasColumnType("integer");

                    b.Property<int?>("BuildingId1")
                        .HasColumnType("integer");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("integer");

                    b.Property<string>("IPAddress")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("ManufacturerId")
                        .HasColumnType("integer");

                    b.Property<int?>("ManufacturerId1")
                        .HasColumnType("integer");

                    b.Property<int>("ModelId")
                        .HasColumnType("integer");

                    b.Property<string>("PrintQueue")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("SerialNumber")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("UnitId")
                        .HasColumnType("integer");

                    b.Property<int?>("UnitId1")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BuildingId");

                    b.HasIndex("BuildingId1");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("ManufacturerId1");

                    b.HasIndex("ModelId");

                    b.HasIndex("UnitId");

                    b.HasIndex("UnitId1");

                    b.ToTable("Printers", (string)null);
                });

            modelBuilder.Entity("backendInventory.Domain.Models.Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Neighborhood")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Number")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("State")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.ToTable("Units", (string)null);
                });

            modelBuilder.Entity("backendInventory.Domain.Models.Building", b =>
                {
                    b.HasOne("backendInventory.Domain.Models.Unit", "Unit")
                        .WithMany("Buildings")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("backendInventory.Domain.Models.Department", b =>
                {
                    b.HasOne("backendInventory.Domain.Models.Building", "Building")
                        .WithMany("Departments")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Building");
                });

            modelBuilder.Entity("backendInventory.Domain.Models.Model", b =>
                {
                    b.HasOne("backendInventory.Domain.Models.Manufacturer", "Manufacturer")
                        .WithMany("Models")
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Manufacturer");
                });

            modelBuilder.Entity("backendInventory.Domain.Models.Printer", b =>
                {
                    b.HasOne("backendInventory.Domain.Models.Building", "Building")
                        .WithMany()
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("backendInventory.Domain.Models.Building", null)
                        .WithMany("Printers")
                        .HasForeignKey("BuildingId1");

                    b.HasOne("backendInventory.Domain.Models.Department", "Department")
                        .WithMany("Printers")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("backendInventory.Domain.Models.Manufacturer", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("backendInventory.Domain.Models.Manufacturer", null)
                        .WithMany("Printers")
                        .HasForeignKey("ManufacturerId1");

                    b.HasOne("backendInventory.Domain.Models.Model", "Model")
                        .WithMany("Printers")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("backendInventory.Domain.Models.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("backendInventory.Domain.Models.Unit", null)
                        .WithMany("Printers")
                        .HasForeignKey("UnitId1");

                    b.Navigation("Building");

                    b.Navigation("Department");

                    b.Navigation("Manufacturer");

                    b.Navigation("Model");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("backendInventory.Domain.Models.Building", b =>
                {
                    b.Navigation("Departments");

                    b.Navigation("Printers");
                });

            modelBuilder.Entity("backendInventory.Domain.Models.Department", b =>
                {
                    b.Navigation("Printers");
                });

            modelBuilder.Entity("backendInventory.Domain.Models.Manufacturer", b =>
                {
                    b.Navigation("Models");

                    b.Navigation("Printers");
                });

            modelBuilder.Entity("backendInventory.Domain.Models.Model", b =>
                {
                    b.Navigation("Printers");
                });

            modelBuilder.Entity("backendInventory.Domain.Models.Unit", b =>
                {
                    b.Navigation("Buildings");

                    b.Navigation("Printers");
                });
#pragma warning restore 612, 618
        }
    }
}
